#!/bin/sh

#========================================================================
# TSVデータから縦棒グラフ画像を作成する
#========================================================================

#========================================================================
# 作業用ディレクトリの作成と削除トラップの設定
#========================================================================
tmpd=/tmp/$$
rm	-rf $tmpd
mkdir	-p $tmpd
trap	"[ -d $tmpd ] && chmod -R u+w $tmpd; rm -rf $tmpd" EXIT

#========================================================================
# オプションを処理
#========================================================================
outfile=chart.png
type=png
while	getopts o:t:D OPT
do
	case $OPT in
	# 出力ファイルパスを指定
	o)
		outfile="$OPTARG"
		;;
	# 画像形式を指定
	t) 
		type="$OPTARG"
		;;
	D)
		debug="on"
		;;
	esac
done
shift	$((OPTIND - 1))

#========================================================================
# 引数にデータファイルが必要。データファイルが指定されていない場合には
# 処理を終了
#========================================================================
if	[ "1" != $# ]
then
	exit 1
fi

#========================================================================
# Google Charts用HTMLテンプレート
#========================================================================
cat<<EOF							> $tmpd/html1
<html  lang="ja">
  <head>
    <meta charset="utf-8">
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
      google.charts.load('current', {'packages':['corechart', 'bar']});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {

        var data = google.visualization.arrayToDataTable([
EOF

# ここに下記形式のデータ(下記のセクションで生成している)
#    データ形式:
#	['項目','値'],
#	['名前1',値1],
#	['名前2',値2],
#	  ...
#	['名前N',値N]

cat<<EOF							> $tmpd/html2
        ]);

	// 2023-02-10 後藤
	// 縦棒グラフ(ColumnChart)はY軸のラベル表示が一部消えるため、比較的
	// そこが崩れない横棒グラフ(BarChart)を使う。ただし、横棒グラフでも
	// Y軸のラベルは崩れる。ただ、chartArea: {width: '60%'} を指定すると
	// 表示がかなりましになるので、下記オプションを使っている。
        var options = {
	  width: 1200,
	  height: 800,
	  chartArea: {width: '60%'},
	  legend: { position: 'none' }
        };

	// チャートを生成
        var chart = new google.visualization.BarChart(document.getElementById('chart'));

	// チャートの描画完了後に組み込みPNG画像文字列データ(Base64)として表示
	google.visualization.events.addListener(chart, 'ready', function () {
	  document.getElementById('chartdata').innerHTML = chart.getImageURI();
	});

        // チャートを描画
	chart.draw(data, options);
      }
    </script>
  </head>
  <body>
    <div id="chart" style="width: 1200px; height: 800px;"></div>
    <p id="chartdata"></p>
  </body>
</html>
EOF

#========================================================================
# グラフデータをGoogle Charts用データに加工
#========================================================================
# データ形式:
#	['項目','値'],
#	['名前1',値1],
#	['名前2',値2],
#	  ...
#	['名前N',値N]
#
echo	-n "['項目','値'],"					> $tmpd/data
cat	$1							|
tsv2ssv								|
awk	"{printf(\"['%s',%s]\\n\",\$1,\$2)}"			|
sed	's/_/ /g'						|
sed	's/$/,/'						|
tr	-d '\n'							|
sed	's/,$//'						>>$tmpd/data

#========================================================================
# Google Charts用グラフHTMLファイルを作成
#========================================================================
cat	$tmpd/html1						\
	$tmpd/data						\
	$tmpd/html2						> $tmpd/chart.html

#========================================================================
# Google Charts用グラフHTMLファイルパスからWebDriverからアクセスできる
# パスを作成する
#========================================================================
charthtmlpath=$tmpd/chart.html
case	$(uname) in
MSYS*)
	charthtmlpath=C:/msys64/$tmpd/chart.html
esac

#========================================================================
# Google Charts用グラフHTMLファイルからチャート画像のBase64データを取得
#========================================================================
# 理由は不明だが、「///*[@id="chartdata"]」でPowerShellには
# 「//*[@id="chartdata"]」として渡ってくるためそのように指定
# してある。「//」が「/」に変換されているように見える。
gettext_fromhtml.ps1						\
	"$charthtmlpath"					\
	'///*[@id="chartdata"]'					|
#
# PowerShell $PROFILEが原因でエラーが出力されることがあり、
# これがデータとして含まれることがあるため、そうしたデータは
# 削除しておく。
grep	-v '^'						|
#
# 組み込み画像のメタデータは削除して画像データのBase64のみにする。
grep	'^data:image'						|
sed	's|data:image/png;base64,||'				> $tmpd/chart.b64

#========================================================================
# チャート画像のBase64データを画像データをデコードする
#========================================================================
base64	-d $tmpd/chart.b64					> $tmpd/chart.png

#========================================================================
# 画像形式を変換
#========================================================================
case	${type} in
png)
	cp 	$tmpd/chart.png					\
		$tmpd/out."$type"
	;;
*)
	gm	convert						\
		-quality 100					\
		$tmpd/chart.png					\
		$tmpd/out."$type"
	;;
esac

#========================================================================
# チャート画像を出力
#========================================================================
cp	$tmpd/out."$type"					\
	"$outfile"

#========================================================================
# デバッグ用機能
#========================================================================
if	[ "on" == "$debug" ]
then
	cp	$charthtmlpath					\
		~/Desktop/chart.html
	cp	$tmpd/chart.b64					\
		~/Desktop/chart.b64.txt
fi
